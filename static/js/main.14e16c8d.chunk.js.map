{"version":3,"sources":["component/Counter.module.css","component/Counter.tsx","component/Button/Button.tsx","state/count-reducer.ts","component/CounterContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Counter","count","maxClass","maxValue","s","item","itemMax","className","Button","stepNumber","startValue","incCountCallback","resetCountCallback","buttonInc","buttonReset","disabledInc","disabledReset","buttonCont","button","incCount","onClick","disabled","resetCount","countReducer","state","action","type","CounterContainer","useReducer","dispatchAddCount","appCont","IncCountAC","ResetCountAC","App","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,QAAU,yBAAyB,KAAO,sBAAsB,QAAU,yBAAyB,WAAa,4BAA4B,OAAS,wBAAwB,SAAW,0BAA0B,WAAa,8B,sICO/PC,EAA+B,SAAC,GAClB,IAAtBC,EAAqB,EAArBA,MACGC,EAAWD,IADO,EAAdE,SACO,UAAwBC,IAAEC,KAA1B,cAAoCD,IAAEE,SAAYF,IAAEC,KAEnE,OACI,8BACI,qBAAKE,UAAWL,EAAhB,SAA2BD,OCC1BO,EAAoC,SAAC,GAET,IADpCP,EACmC,EADnCA,MAAOQ,EAC4B,EAD5BA,WAAYC,EACgB,EADhBA,WAAYC,EACI,EADJA,iBAAkBC,EACd,EADcA,mBAAoBC,EAClC,EADkCA,UAAWC,EAC7C,EAD6CA,YAC7EC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,cAEjB,OACI,sBAAKT,UAAWH,IAAEa,WAAlB,UACI,wBAAQV,UAAS,UAAKH,IAAEc,OAAP,cAAmBd,IAAEe,UAAYC,QAAS,kBAAIT,EAAiBV,EAAOQ,IAC/EY,SAAUN,EADlB,SACgCF,IAChC,wBAAQN,UAAS,UAAKH,IAAEc,OAAP,cAAmBd,IAAEkB,YAAcF,QAAS,kBAAIR,EAAmBX,EAAOS,IACnFW,SAAUL,EADlB,SACkCF,QCtBjCS,EAAe,SAACC,EAAeC,GAC1C,OAAQA,EAAOC,MACX,IAAK,YACD,OAASD,EAAOxB,MAAQwB,EAAOhB,WAInC,IAAK,cACD,OAAQgB,EAAOf,WAGnB,QACI,OAAOc,ICAJG,EAAmB,WAC5B,IADkC,EAOAC,qBAAWL,EAN5B,GADiB,mBAO3BtB,EAP2B,KAOpB4B,EAPoB,KAmB9Bd,EAAcd,GAjBH,EAkBXe,EAnBa,IAmBGf,EAEpB,OACI,sBAAKM,UAAWH,IAAE0B,QAAlB,UACI,cAAC,EAAD,CAAS7B,MAAOA,EACPE,SAvBF,IAwBP,cAAC,EAAD,CAAQQ,iBAjBC,SAACV,EAAeQ,GAG7BoB,EDPkB,SAAC5B,EAAeQ,GACtC,MAAO,CACHiB,KAAM,YACNzB,QACAQ,cCGiBsB,CAAW9B,EAAOQ,KAevBG,mBAbG,SAACX,EAAeS,GAE/BmB,EDFoB,SAAC5B,EAAeS,GACxC,MAAO,CACHgB,KAAM,cACNzB,QACAS,cCFiBsB,CAAa/B,EAAOS,KAYzBG,UAxBA,MAyBAC,YAxBE,QAyBFC,YAAaA,EACbC,cAAeA,EACff,MAAOA,EACPQ,WA9BC,EA+BDC,WAjCC,QCHNuB,EARH,WACR,OACI,qBAAK1B,UAAWH,IAAE8B,IAAlB,SACI,cAAC,EAAD,OCOGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.14e16c8d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"Counter_app__2bES3\",\"appCont\":\"Counter_appCont__1iTL9\",\"item\":\"Counter_item__26AQm\",\"itemMax\":\"Counter_itemMax__2UmEp\",\"buttonCont\":\"Counter_buttonCont__30v9z\",\"button\":\"Counter_button__2gjA0\",\"incCount\":\"Counter_incCount__3AAAh\",\"resetCount\":\"Counter_resetCount__CYcyr\"};","import React from 'react'\r\nimport s from './Counter.module.css'\r\n\r\ntype PropsType = {\r\n    count: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Counter: React.FC<PropsType> = (\r\n    {count, maxValue}) => {\r\n    let maxClass = count === maxValue ? `${s.item} + ${s.itemMax}` : s.item\r\n\r\n    return (\r\n        <div>\r\n            <div className={maxClass}>{count}</div>\r\n        </div>\r\n    )\r\n}","import React, {MouseEventHandler} from 'react'\r\nimport s from './../Counter.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    incCountCallback: (count: number, stepNumber: number) => void\r\n    resetCountCallback: (count: number, startValue: number) => void\r\n    buttonInc: string\r\n    buttonReset: string\r\n    disabledInc: boolean\r\n    disabledReset: boolean\r\n    stepNumber: number\r\n    count: number\r\n    startValue: number\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (\r\n    {count, stepNumber, startValue, incCountCallback, resetCountCallback, buttonInc, buttonReset,\r\n        disabledInc, disabledReset}) => {\r\n\r\n    return (\r\n        <div className={s.buttonCont}>\r\n            <button className={`${s.button} + ${s.incCount}`} onClick={()=>incCountCallback(count, stepNumber)}\r\n                    disabled={disabledInc}>{buttonInc}</button>\r\n            <button className={`${s.button} + ${s.resetCount}`} onClick={()=>resetCountCallback(count ,startValue)}\r\n                    disabled={disabledReset}>{buttonReset}</button>\r\n        </div>\r\n    )\r\n}","\r\n\r\nexport const countReducer = (state: number, action: incCountActionType | ResetCountActionType) => {\r\n  switch (action.type){\r\n      case 'INC-COUNT': {\r\n          return  (action.count + action.stepNumber)\r\n          //(action.count + action.stepNumber)\r\n          //[state].map(f =>  + f.stenNumber)\r\n      }\r\n      case \"RESET-COUNT\": {\r\n          return (action.startValue)\r\n          /*action.startValue*/\r\n      }\r\n      default:\r\n          return state\r\n  }\r\n}\r\n\r\nexport type incCountActionType = ReturnType<typeof IncCountAC>\r\nexport const IncCountAC = (count: number, stepNumber: number) => {\r\n    return {\r\n        type: 'INC-COUNT',\r\n        count,\r\n        stepNumber\r\n\r\n    }as const\r\n}\r\nexport type ResetCountActionType = ReturnType<typeof ResetCountAC>\r\nexport const ResetCountAC = (count: number, startValue: number) => {\r\n    return {\r\n        type: 'RESET-COUNT',\r\n        count,\r\n        startValue\r\n    }as const\r\n}","import React, {useReducer, useState} from 'react'\r\nimport {Counter} from './Counter'\r\nimport s from './Counter.module.css'\r\nimport {Button} from \"./Button/Button\";\r\nimport {countReducer, IncCountAC, ResetCountAC} from \"../state/count-reducer\";\r\n\r\nexport type CountType = {\r\n    startValue: number\r\n    maxValue: number\r\n    stenNumber: number\r\n    buttonInc: string\r\n    buttonReset: string\r\n}\r\n\r\nexport const CounterContainer = () => {\r\n    let startValue = 0\r\n    let maxValue = 5\r\n    let stepNumber = 1\r\n    let buttonInc = 'inc'\r\n    let buttonReset = 'reset'\r\n\r\n    const [count, dispatchAddCount] = useReducer(countReducer, startValue)\r\n\r\n    const incCount = (count: number, stepNumber: number) => {\r\n        //dispatchCount(IncCountAC(count, stepNumber))\r\n        //setAddCount(count + stepNumber)\r\n        dispatchAddCount(IncCountAC(count, stepNumber))\r\n    }\r\n    const resetCount = (count: number, startValue: number) => {\r\n        //setAddCount(startValue)\r\n        dispatchAddCount(ResetCountAC(count ,startValue))\r\n    }\r\n\r\n    let disabledInc = count >= maxValue\r\n    let disabledReset = count === startValue\r\n\r\n    return (\r\n        <div className={s.appCont}>\r\n            <Counter count={count}\r\n                     maxValue={maxValue}/>\r\n            <Button incCountCallback={incCount}\r\n                    resetCountCallback={resetCount}\r\n                    buttonInc={buttonInc}\r\n                    buttonReset={buttonReset}\r\n                    disabledInc={disabledInc}\r\n                    disabledReset={disabledReset}\r\n                    count={count}\r\n                    stepNumber={stepNumber}\r\n                    startValue={startValue}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport s from './component/Counter.module.css'\nimport {CounterContainer} from \"./component/CounterContainer\";\n\nconst App = () => {\n    return (\n        <div className={s.app}>\n            <CounterContainer/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}