{"version":3,"sources":["component/Counter.module.css","component/Button/Button.tsx","state/count-reducer.ts","component/Counter.tsx","component/BlockSettings/BlockSettings.tsx","component/CounterContainer.tsx","App.tsx","reportWebVitals.ts","state/store.ts","state/LocalStorage.ts","index.tsx","component/BlockSettings/BlockSettings.module.css"],"names":["module","exports","Button","restProps","initialState","count","startValue","maxValue","stepNumber","buttonInc","buttonReset","buttonSet","textCountSet","Counter","incCountCallback","disabledInc","resetCountCallback","disabledReset","maxClass","s","item","itemMax","classNameButtonInc","button","incCount","classNameButtonReset","resetCount","disabledAll","countError","windowValue","incorrectValue","windowValueClass","disabledIncAll","disabledResAll","className","buttonCont","disabled","onClick","BlockSettings","setMaxValue","setCountCallback","setStartValue","inputClass","errorInput","input","blockCont","valueCont","valueName","type","value","onChange","e","currentTarget","valueAsNumber","CounterContainer","useSelector","state","counter","dispatch","useDispatch","ResetCountAC","appCont","IncCountAC","SetMaxValueAC","SetStartValueAC","SetCountAC","App","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,QAAU,yBAAyB,UAAY,2BAA2B,KAAO,sBAAsB,QAAU,yBAAyB,WAAa,4BAA4B,OAAS,wBAAwB,eAAiB,gCAAgC,SAAW,0BAA0B,WAAa,8B,yHCmBvVC,EAAoC,SAAC,GAAoB,IAAhBC,EAAe,oBAEjE,OACI,8BACI,sCAAYA,OCtBXC,EAAe,CACxBC,MAAO,EACPC,WAAY,EACZC,SAAU,EACVC,WAAY,EACZC,UAAW,MACXC,YAAa,QACbC,UAAW,MACXC,aAAc,aCKLC,EAA+B,SAAC,GAMlC,IAJHR,EAIE,EAJFA,MAAOE,EAIL,EAJKA,SACPO,EAGE,EAHFA,iBAAkBC,EAGhB,EAHgBA,YAClBC,EAEE,EAFFA,mBAAoBC,EAElB,EAFkBA,cAAeX,EAEjC,EAFiCA,WAcnCY,GAZE,uHAYSb,IAAUE,EAAV,UAAwBY,IAAEC,KAA1B,cAAoCD,IAAEE,SAAYF,IAAEC,MAC7DE,EAAkB,UAAMH,IAAEI,OAAR,cAAoBJ,IAAEK,UACxCC,EAAoB,UAAMN,IAAEI,OAAR,cAAoBJ,IAAEO,YAE5CC,EAAcrB,GAAcC,GAAYD,EAAa,EAErDsB,EAAa,kBACbC,EAAcF,EAAcC,EAAavB,EAGzCyB,EAAc,UAAMX,IAAEW,gBACtBC,EAAmBF,IAAgBD,EAAaE,EAAiBZ,EAEjEc,EAAiBL,GAAeZ,EAChCkB,EAAiBN,GAAeV,EAEpC,OACI,gCACI,qBAAKiB,UAAWH,EAAhB,SAAmCF,IACnC,sBAAKK,UAAWf,IAAEgB,WAAlB,UAEI,cAAC,EAAD,CAAQD,UAAWZ,EAAoBc,SAAUJ,EAAgBxB,WAAYJ,EAAaI,WAClFH,MAAOA,EAAOgC,QAhCF,WAC5BvB,EAAiBT,EAAOD,EAAaI,aA8B7B,SAEKJ,EAAaK,YAGlB,cAAC,EAAD,CAAQyB,UAAWT,EACXW,SAAUH,EAAgB5B,MAAOA,EAAOC,WAAYA,EACpD+B,QAnCc,WAC9BrB,EAAmBX,EAAOC,IAgClB,SAGKF,EAAaM,qB,gBC9CrB4B,EAA6C,SAAC,GAIhD,IAFHhC,EAEE,EAFFA,WAAYC,EAEV,EAFUA,SAAUgC,EAEpB,EAFoBA,YAAalC,EAEjC,EAFiCA,MAAOmC,EAExC,EAFwCA,iBAC1CC,EACE,EADFA,cAAezB,EACb,EADaA,mBAgBfW,EAAcrB,GAAcC,GAAYD,EAAa,EACrDoC,EAAaf,EAAcR,IAAEwB,WAAaxB,IAAEyB,MAEhD,OACI,sBAAKV,UAAWf,IAAE0B,UAAlB,UACI,sBAAKX,UAAWf,IAAE2B,UAAlB,UACI,sBAAKZ,UAAWf,IAAE4B,UAAlB,sBAEI,sBAAMb,UAAWQ,EAAjB,SACN,uBAAOM,KAAK,SAASC,MAAO1C,EAAU2C,SAtBnB,SAACC,GAC1BZ,EAAYY,EAAEC,cAAcC,uBAwBpB,sBAAKnB,UAAWf,IAAE4B,UAAlB,wBAEI,sBAAMb,UAAWQ,EAAjB,SACN,uBAAOM,KAAK,SAASC,MAAO3C,EAAY4C,SAxBnB,SAACC,GAC5BV,EAAcU,EAAEC,cAAcC,0BA2B1B,qBAAKnB,UAAWf,IAAEgB,WAAlB,SACI,cAAC,EAAD,CAAQD,UAAWf,IAAEI,OAAQc,QAzBhB,WACrBG,EAAiBlC,GACjBU,EAAmBX,EAAOC,IAuBsC8B,SAAUT,EAAlE,SACKvB,EAAaO,kB,OCzCrB2C,EAAmB,WAG5B,IAAMjD,EAAQkD,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,QAAQpD,SACjEE,EAAWgD,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,QAAQlD,YACpED,EAAaiD,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,QAAQnD,cACtEoD,EAAWC,cAKXjC,EAAa,SAACrB,EAAeC,GAC/BoD,EHiCoB,SAACrD,EAAeC,GACxC,MAAO,CACH0C,KAAM,cACN3C,QACAC,cGrCSsD,CAAavD,EAAOC,KA6C7BS,EAAcV,GAASE,EACvBU,EAAgBZ,IAAUC,EAG9B,OACI,sBAAK4B,UAAWf,IAAEsC,QAAlB,UACI,qBAAKvB,UAAWf,IAAE0C,QAAlB,SACI,cAAC,EAAD,CAASxD,MAAOA,EACPE,SAAUA,EACVD,WAAYA,EACZQ,iBA3DJ,SAACT,EAAeG,GAC7BkD,EH0BkB,SAACrD,EAAeG,GACtC,MAAO,CACHwC,KAAM,YACN3C,QACAG,cG9BSsD,CAAWzD,EAAOG,KA2DVQ,mBAAoBU,EACpBX,YAAaA,EACbE,cAAeA,MAE5B,qBAAKiB,UAAWf,IAAE0B,UAAlB,SACI,cAAC,EAAD,CAAevC,WAAYA,EACZC,SAAUA,EACVgC,YA1DP,SAAChC,GACjBmD,EH4CqB,SAACnD,GAC1B,MAAO,CACHyC,KAAM,gBACNzC,YG/CSwD,CAAcxD,KA0DAkC,cAxDL,SAACnC,GACnBoD,EHkDuB,SAACpD,GAC5B,MAAO,CACH0C,KAAM,kBACN1C,cGrDS0D,CAAgB1D,KAwDFU,mBAAoBU,EACpBrB,MAAOA,EACPmC,iBAxDV,SAAClC,GACdoD,EH8BkB,SAACpD,GACvB,MAAO,CACH0C,KAAM,YACN1C,cGjCS2D,CAAW3D,aC3Bb4D,EARH,WACR,OACI,qBAAKhC,UAAWf,IAAEgD,IAAlB,SACI,cAAC,EAAD,OCOGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCHRQ,EAAcC,YAAgB,CAChCrB,QNUwB,WAAmF,IAAlFD,EAAiF,uDAAvDpD,EAAc2E,EAAyC,uCAC1G,OAAQA,EAAO/B,MACX,IAAK,YACD,OAAO,2BACAQ,GADP,IACcnD,MAAOmD,EAAMnD,MAAQmD,EAAMhD,aAG7C,IAAK,cACD,OAAO,2BACAgD,GADP,IACcnD,MAAOmD,EAAMlD,aAG/B,IAAK,YACD,OAAO,2BACAkD,GADP,IACclD,WAAYyE,EAAOzE,aAGrC,IAAK,gBACD,OAAO,2BACAkD,GADP,IACcjD,SAAUwE,EAAOxE,WAGnC,IAAK,kBACD,OAAO,2BACAiD,GADP,IACclD,WAAYyE,EAAOzE,aAGrC,QACI,OAAOkD,MMjCNwB,EAAQC,YAAYJ,ECVR,WACrB,IACI,IAAMK,EAAkBC,aAAaC,QAAQ,aAC7C,GAAwB,OAApBF,EACA,OAEJ,OAAOG,KAAKC,MAAMJ,GACpB,MAAOK,GACL,QDEsCC,IAE9CR,EAAMS,WAAU,YCAS,SAACjC,GACtB,IACI,IAAM0B,EAAkBG,KAAKK,UAAUlC,GACvC2B,aAAaQ,QAAQ,YAAaT,GACpC,WDHFU,CAAU,CACNnC,QAASuB,EAAMa,WAAWpC,aERlCqC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUhB,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRiB,SAASC,eAAe,SAM5B9B,K,kBCnBApE,EAAOC,QAAU,CAAC,UAAY,iCAAiC,UAAY,iCAAiC,MAAQ,6BAA6B,WAAa,kCAAkC,WAAa,kCAAkC,OAAS,iC","file":"static/js/main.e01929cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"Counter_app__2bES3\",\"appCont\":\"Counter_appCont__1iTL9\",\"blockCont\":\"Counter_blockCont__1B3tW\",\"item\":\"Counter_item__26AQm\",\"itemMax\":\"Counter_itemMax__2UmEp\",\"buttonCont\":\"Counter_buttonCont__30v9z\",\"button\":\"Counter_button__2gjA0\",\"incorrectValue\":\"Counter_incorrectValue__2DejZ\",\"incCount\":\"Counter_incCount__3AAAh\",\"resetCount\":\"Counter_resetCount__CYcyr\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\n\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype ButtonPropsType = DefaultButtonPropsType & {\r\n    incCountCallback?: (count: number, stepNumber: number) => void\r\n    resetCountCallback?: (count: number, startValue: number) => void\r\n    saveValueCallback?: () => void\r\n    buttonInc?: string\r\n    buttonReset?: string\r\n    buttonSet?: string\r\n    disabledInc?: boolean\r\n    disabledReset?: boolean\r\n    stepNumber?: number\r\n    count?: number\r\n    startValue?: number\r\n    className?: string\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({...restProps}) => {\r\n\r\n    return (\r\n        <div>\r\n            <button {...restProps}/>\r\n        </div>\r\n    )\r\n}","export type InitialStateType = typeof initialState\r\n\r\nexport const initialState = {\r\n    count: 0,\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    stepNumber: 1,\r\n    buttonInc: 'inc',\r\n    buttonReset: 'reset',\r\n    buttonSet: 'Set',\r\n    textCountSet: 'press Set'\r\n}\r\n\r\n\r\ntype ActionType = IncCountActionType | ResetCountActionType | SetValueCountActionType\r\n    | SetMaxValueActionType | SetStartValueActionType\r\n\r\nexport const countReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'INC-COUNT': {\r\n            return {\r\n                ...state, count: state.count + state.stepNumber\r\n            }\r\n        }\r\n        case \"RESET-COUNT\": {\r\n            return {\r\n                ...state, count: state.startValue\r\n            }\r\n        }\r\n        case 'SET-COUNT': {\r\n            return {\r\n                ...state, startValue: action.startValue\r\n            }// 'enter values and press Set'\r\n        }\r\n        case 'SET-MAX-VALUE': {\r\n            return {\r\n                ...state, maxValue: action.maxValue\r\n            }\r\n        }\r\n        case 'SET-START-VALUE': {\r\n            return {\r\n                ...state, startValue: action.startValue\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type IncCountActionType = ReturnType<typeof IncCountAC>\r\nexport const IncCountAC = (count: number, stepNumber: number) => {\r\n    return {\r\n        type: 'INC-COUNT',\r\n        count,\r\n        stepNumber\r\n\r\n    } as const\r\n}\r\n\r\nexport type ResetCountActionType = ReturnType<typeof ResetCountAC>\r\nexport const ResetCountAC = (count: number, startValue: number) => {\r\n    return {\r\n        type: 'RESET-COUNT',\r\n        count,\r\n        startValue\r\n    } as const\r\n}\r\n\r\nexport type SetValueCountActionType = ReturnType<typeof SetCountAC>\r\nexport const SetCountAC = (startValue: number) => {\r\n    return {\r\n        type: 'SET-COUNT',\r\n        startValue\r\n    } as const\r\n}\r\n\r\nexport type SetMaxValueActionType = ReturnType<typeof SetMaxValueAC>\r\nexport const SetMaxValueAC = (maxValue: number) => {\r\n    return {\r\n        type: 'SET-MAX-VALUE',\r\n        maxValue,\r\n\r\n    } as const\r\n}\r\n\r\nexport type SetStartValueActionType = ReturnType<typeof SetStartValueAC>\r\nexport const SetStartValueAC = (startValue: number) => {\r\n    return {\r\n        type: 'SET-START-VALUE',\r\n        startValue,\r\n\r\n    } as const\r\n}\r\n","import React from 'react'\r\nimport s from './Counter.module.css'\r\nimport {Button} from \"./Button/Button\";\r\nimport {initialState} from \"../state/count-reducer\";\r\n\r\ntype PropsType = {\r\n    count: number\r\n    maxValue: number\r\n    startValue: number\r\n    incCountCallback: (count: number, stepNumber: number) => void\r\n    resetCountCallback: (count: number, startValue: number) => void\r\n    disabledInc: boolean\r\n    disabledReset: boolean\r\n}\r\n\r\nexport const Counter: React.FC<PropsType> = (\r\n    {\r\n        count, maxValue,\r\n        incCountCallback, disabledInc,\r\n        resetCountCallback, disabledReset, startValue,\r\n        ...restProps\r\n    }) => {\r\n\r\n    const incCountCallbackHandler = () => {\r\n        incCountCallback(count, initialState.stepNumber)\r\n    }\r\n    const resetCountCallbackHandler = () => {\r\n        resetCountCallback(count, startValue)\r\n    }\r\n\r\n\r\n    // classes\r\n\r\n    let maxClass = count === maxValue ? `${s.item} + ${s.itemMax}` : s.item\r\n    const classNameButtonInc = `${s.button} + ${s.incCount}`\r\n    const classNameButtonReset = `${s.button} + ${s.resetCount}`\r\n\r\n    let disabledAll = startValue >= maxValue || startValue < 0\r\n\r\n    let countError = 'Incorrect value'\r\n    let windowValue = disabledAll ? countError : count\r\n    //\r\n\r\n    let incorrectValue = `${s.incorrectValue}`\r\n    let windowValueClass = windowValue === countError ? incorrectValue : maxClass\r\n\r\n    let disabledIncAll = disabledAll || disabledInc\r\n    let disabledResAll = disabledAll || disabledReset\r\n\r\n    return (\r\n        <div>\r\n            <div className={windowValueClass}>{windowValue}</div>\r\n            <div className={s.buttonCont}>\r\n\r\n                <Button className={classNameButtonInc} disabled={disabledIncAll} stepNumber={initialState.stepNumber}\r\n                        count={count} onClick={incCountCallbackHandler}>\r\n                    {initialState.buttonInc}\r\n                </Button>\r\n\r\n                <Button className={classNameButtonReset}\r\n                        disabled={disabledResAll} count={count} startValue={startValue}\r\n                        onClick={resetCountCallbackHandler}>\r\n                    {initialState.buttonReset}\r\n                </Button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from './BlockSettings.module.css'\r\nimport {Button} from \"../Button/Button\";\r\nimport {initialState} from \"../../state/count-reducer\";\r\n\r\ntype BlockSettingsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    setMaxValue: (maxValue: number) => void\r\n    setStartValue: (startValue: number) => void\r\n    resetCountCallback: (count: number, startValue: number) => void\r\n    count: number\r\n    setCountCallback: (startValue: number) => void\r\n}\r\n\r\n\r\nexport const BlockSettings: React.FC<BlockSettingsType> = (\r\n    {\r\n        startValue, maxValue, setMaxValue, count, setCountCallback,\r\n        setStartValue, resetCountCallback\r\n    }) => {\r\n\r\n    const maxValueEnterHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMaxValue(e.currentTarget.valueAsNumber)\r\n\r\n    }\r\n    const startValueEnterHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStartValue(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    const saveValueHandler = () => {\r\n        setCountCallback(startValue)\r\n        resetCountCallback(count, startValue)\r\n    }\r\n\r\n    let disabledAll = startValue >= maxValue || startValue < 0\r\n    let inputClass = disabledAll ? s.errorInput : s.input\r\n\r\n    return (\r\n        <div className={s.blockCont}>\r\n            <div className={s.valueCont}>\r\n                <div className={s.valueName}>\r\n                    maxValue:\r\n                    <span className={inputClass}>\r\n              <input type='number' value={maxValue} onChange={maxValueEnterHandler}/>\r\n          </span>\r\n                </div>\r\n                <div className={s.valueName}>\r\n                    startValue:\r\n                    <span className={inputClass}>\r\n              <input type='number' value={startValue} onChange={startValueEnterHandler}/>\r\n          </span>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttonCont}>\r\n                <Button className={s.button} onClick={saveValueHandler} disabled={disabledAll}>\r\n                    {initialState.buttonSet}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {Counter} from './Counter'\r\nimport s from './Counter.module.css'\r\nimport {BlockSettings} from \"./BlockSettings/BlockSettings\";\r\nimport {\r\n    IncCountAC,\r\n    ResetCountAC,\r\n    SetMaxValueAC,\r\n    SetStartValueAC,\r\n    SetCountAC\r\n} from \"../state/count-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../state/store\";\r\n\r\n\r\nexport const CounterContainer = () => {\r\n\r\n// redux , useSelect\r\n    const count = useSelector<AppStateType, number>(state => state.counter.count)\r\n    const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n    const startValue = useSelector<AppStateType, number>(state => state.counter.startValue)\r\n    const dispatch = useDispatch()\r\n\r\n    const incCount = (count: number, stepNumber: number) => {\r\n        dispatch(IncCountAC(count, stepNumber))\r\n    }\r\n    const resetCount = (count: number, startValue: number) => {\r\n        dispatch(ResetCountAC(count, startValue))\r\n    }\r\n\r\n\r\n    // Block Settings\r\n    const setMaxValue = (maxValue: number) => {\r\n        dispatch(SetMaxValueAC(maxValue))\r\n    }\r\n    const setStartValue = (startValue: number) => {\r\n        dispatch(SetStartValueAC(startValue))\r\n    }\r\n    const setCount = (startValue: number) => {\r\n        dispatch(SetCountAC(startValue))\r\n    }\r\n\r\n\r\n    // useReducer\r\n    //const [count, dispatchAddCount] = useReducer(countReducer, startValue)\r\n\r\n    /*const incCount = (count: number, stepNumber: number) => {\r\n        //dispatchCount(IncCountAC(count, stepNumber))\r\n        //setAddCount(count + stepNumber)\r\n        dispatchAddCount(IncCountAC(count, stepNumber))\r\n    }\r\n    const resetCount = (count: number, startValue: number) => {\r\n        //setAddCount(startValue)\r\n        dispatchAddCount(ResetCountAC(count, startValue))\r\n    }\r\n    const setCount = () => {\r\n        dispatchAddCount(SetValueCountAC())\r\n    }*/\r\n\r\n\r\n    // useState\r\n\r\n    /*const [count, setAddCount] = useState<number>(startValue)\r\n\r\n    const incCount = (count: number, stepNumber: number) => {\r\n        setAddCount(count + stepNumber)\r\n    }\r\n    const resetCount = (count: number, startValue: number) => {\r\n        setAddCount(startValue)\r\n    }*/\r\n\r\n\r\n    let disabledInc = count >= maxValue\r\n    let disabledReset = count === startValue\r\n\r\n\r\n    return (\r\n        <div className={s.counter}>\r\n            <div className={s.appCont}>\r\n                <Counter count={count}\r\n                         maxValue={maxValue}\r\n                         startValue={startValue}\r\n                         incCountCallback={incCount}\r\n                         resetCountCallback={resetCount}\r\n                         disabledInc={disabledInc}\r\n                         disabledReset={disabledReset}/>\r\n            </div>\r\n            <div className={s.blockCont}>\r\n                <BlockSettings startValue={startValue}\r\n                               maxValue={maxValue}\r\n                               setMaxValue={setMaxValue}\r\n                               setStartValue={setStartValue}\r\n                               resetCountCallback={resetCount}\r\n                               count={count}\r\n                               setCountCallback={setCount}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport s from './component/Counter.module.css'\nimport {CounterContainer} from \"./component/CounterContainer\";\n\nconst App = () => {\n    return (\n        <div className={s.app}>\n            <CounterContainer/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {countReducer} from \"./count-reducer\";\r\nimport {loadState, saveState} from \"./LocalStorage\";\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: countReducer\r\n})\r\n\r\n\r\ntype AppStoreType = typeof store\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n    // localStorage.setItem('app-state', JSON.stringify(store.getState()))\r\n})","import {AppStateType} from \"./store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"valueCont\":\"BlockSettings_valueCont__17aK4\",\"valueName\":\"BlockSettings_valueName__3Nn6U\",\"input\":\"BlockSettings_input__1qAjX\",\"errorInput\":\"BlockSettings_errorInput__283na\",\"buttonCont\":\"BlockSettings_buttonCont__2lE0K\",\"button\":\"BlockSettings_button__25fV0\"};"],"sourceRoot":""}