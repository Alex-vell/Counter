{"version":3,"sources":["component/Button/Button.tsx","state/count-reducer.ts","component/Counter.tsx","component/BlockSettings/BlockSettings.tsx","component/CounterContainer.tsx","App.tsx","reportWebVitals.ts","state/store.ts","state/LocalStorage.ts","index.tsx","component/Counter.module.css","component/BlockSettings/BlockSettings.module.css"],"names":["Button","restProps","initialState","count","startValue","maxValue","stepNumber","settingsMode","errorValue","buttonInc","buttonReset","buttonSet","textSettingsMode","titleOneInput","titleSecondInput","textCountError","setSettingsModeAC","type","setErrorValueAC","Counter","onIncCountCallback","disabledInc","onResetCountCallback","disabledReset","onChangeSettingsValueCallback","disabledButton","s","disabled","maxClass","item","itemMax","classNameButtonInc","button","incCount","classNameButtonReset","resetCount","incorrectValue","displayCounterClass","className","buttonCont","onClick","BlockSettings","saveValueCallback","disabledSet","inputClass","errorInput","input","buttonSetClass","blockCont","valueCont","control","valueName","value","onChange","name","CounterContainer","useSelector","state","counter","dispatch","useDispatch","onResetCount","resetCountAC","onChangeSettingsValue","e","currentValue","Number","currentTarget","setStartValueAC","setStartValue","setMaxValueAC","setMaxValue","countCount","incCountAC","blockSettCont","setCountAC","setCount","App","appCounter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f542f71a.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\n\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype ButtonPropsType = DefaultButtonPropsType & {\r\n    incCountCallback?: (count: number, stepNumber: number) => void\r\n    resetCountCallback?: (count: number, startValue: number) => void\r\n    saveValueCallback?: () => void\r\n    buttonInc?: string\r\n    buttonReset?: string\r\n    buttonSet?: string\r\n    disabledInc?: boolean\r\n    disabledReset?: boolean\r\n    stepNumber?: number\r\n    count?: number\r\n    startValue?: number\r\n    className?: string\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({...restProps}) => {\r\n\r\n    return (\r\n        <div>\r\n            <button {...restProps}/>\r\n        </div>\r\n    )\r\n}","export type InitialStateType = typeof initialState\r\n\r\nexport const initialState = {\r\n    count: 0,\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    stepNumber: 1,\r\n    settingsMode: false,\r\n    errorValue: false,\r\n    buttonInc: 'inc',\r\n    buttonReset: 'reset',\r\n    buttonSet: 'Set',\r\n    textSettingsMode: 'press Set',\r\n    titleOneInput: 'maxValue:',\r\n    titleSecondInput: 'startValue:',\r\n    textCountError: 'Incorrect value',\r\n}\r\n\r\n\r\ntype ActionType = IncCountActionType | ResetCountActionType | SetValueCountActionType\r\n    | SetMaxValueActionType | SetStartValueActionType | SetSettingsModeActionType\r\n    | SetCountErrorActionType\r\n\r\nexport const countReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'INC-COUNT': {\r\n            return {\r\n                ...state, count: state.count + state.stepNumber\r\n            }\r\n        }\r\n        case \"RESET-COUNT\": {\r\n            return {\r\n                ...state, count: state.startValue\r\n            }\r\n        }\r\n        case 'SET-COUNT': {\r\n            return {\r\n                ...state, startValue: action.startValue\r\n            }// 'enter values and press Set'\r\n        }\r\n        case 'SET-MAX-VALUE': {\r\n            return {\r\n                ...state, maxValue: action.maxValue\r\n            }\r\n        }\r\n        case 'SET-START-VALUE': {\r\n            return {\r\n                ...state, startValue: action.startValue\r\n            }\r\n        }\r\n        case 'SET-SETTINGS-MODE': {\r\n            return {\r\n                ...state, settingsMode: action.settingsMode\r\n            }\r\n        }\r\n        case 'SET-ERROR-VALUE': {\r\n            return {\r\n                ...state, errorValue: action.errorValue\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type IncCountActionType = ReturnType<typeof incCountAC>\r\nexport const incCountAC = (count: number, stepNumber: number) => {\r\n    return {\r\n        type: 'INC-COUNT',\r\n        count,\r\n        stepNumber\r\n\r\n    } as const\r\n}\r\n\r\nexport type ResetCountActionType = ReturnType<typeof resetCountAC>\r\nexport const resetCountAC = (count: number, startValue: number) => {\r\n    return {\r\n        type: 'RESET-COUNT',\r\n        count,\r\n        startValue\r\n    } as const\r\n}\r\n\r\nexport type SetValueCountActionType = ReturnType<typeof setCountAC>\r\nexport const setCountAC = (startValue: number) => {\r\n    return {\r\n        type: 'SET-COUNT',\r\n        startValue\r\n    } as const\r\n}\r\n\r\nexport type SetMaxValueActionType = ReturnType<typeof setMaxValueAC>\r\nexport const setMaxValueAC = (maxValue: number) => {\r\n    return {\r\n        type: 'SET-MAX-VALUE',\r\n        maxValue,\r\n\r\n    } as const\r\n}\r\n\r\nexport type SetStartValueActionType = ReturnType<typeof setStartValueAC>\r\nexport const setStartValueAC = (startValue: number) => {\r\n    return {\r\n        type: 'SET-START-VALUE',\r\n        startValue,\r\n\r\n    } as const\r\n}\r\n\r\nexport type SetSettingsModeActionType = ReturnType<typeof setSettingsModeAC>\r\nexport const setSettingsModeAC = (settingsMode: boolean) => {\r\n    return {\r\n        type: 'SET-SETTINGS-MODE',\r\n        settingsMode,\r\n\r\n    } as const\r\n}\r\n\r\nexport type SetCountErrorActionType = ReturnType<typeof setErrorValueAC>\r\nexport const setErrorValueAC = (errorValue: boolean) => {\r\n    return {\r\n        type: 'SET-ERROR-VALUE',\r\n        errorValue,\r\n\r\n    } as const\r\n}\r\n","import React, {ChangeEvent} from 'react'\r\nimport s from './Counter.module.css'\r\nimport {Button} from \"./Button/Button\";\r\nimport {initialState} from \"../state/count-reducer\";\r\n\r\ntype PropsType = {\r\n    count: number\r\n    maxValue: number\r\n    startValue: number\r\n    onIncCountCallback: (count: number, stepNumber: number) => void\r\n    onResetCountCallback: (count: number, startValue: number) => void\r\n    disabledInc: boolean\r\n    disabledReset: boolean\r\n    onChangeSettingsValueCallback: (e: ChangeEvent<HTMLInputElement>) => void\r\n    settingsMode: boolean\r\n    errorValue: boolean\r\n}\r\n\r\nexport const Counter: React.FC<PropsType> = (\r\n    {\r\n        count, maxValue, startValue,\r\n        onIncCountCallback, disabledInc,\r\n        onResetCountCallback, disabledReset,\r\n        onChangeSettingsValueCallback, settingsMode, errorValue,\r\n        ...restProps\r\n    }) => {\r\n\r\n    const {stepNumber, textCountError, textSettingsMode, buttonInc, buttonReset} = initialState\r\n\r\n    const onIncCountHandler = () => { onIncCountCallback(count, stepNumber) }\r\n    const onResetCountHandler = () => { onResetCountCallback(count, startValue) }\r\n\r\n    const displayCounter = () => settingsMode ? (errorValue ? textCountError : textSettingsMode) : count\r\n\r\n    //className\r\n\r\n    let disabledButton = `${s.disabled}`\r\n    let maxClass = count === maxValue ? `${s.item} + ${s.itemMax}` : s.item\r\n    let classNameButtonInc = disabledInc ? disabledButton : `${s.button} + ${s.incCount}`\r\n    let classNameButtonReset = disabledReset ? disabledButton : `${s.button} + ${s.resetCount}`\r\n    let incorrectValue = `${s.incorrectValue}`\r\n    let displayCounterClass = errorValue || settingsMode ? incorrectValue : maxClass\r\n\r\n    return (\r\n        <div>\r\n            <div className={displayCounterClass}>{displayCounter()}</div>\r\n            <div className={s.buttonCont}>\r\n\r\n                <Button className={classNameButtonInc} disabled={disabledInc}\r\n                        stepNumber={stepNumber}\r\n                        count={count} onClick={onIncCountHandler}>\r\n                    {buttonInc}\r\n                </Button>\r\n\r\n                <Button className={classNameButtonReset}\r\n                        disabled={disabledReset} count={count} startValue={startValue}\r\n                        onClick={onResetCountHandler}>\r\n                    {buttonReset}\r\n                </Button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from './BlockSettings.module.css'\r\nimport {Button} from \"../Button/Button\";\r\nimport {initialState} from \"../../state/count-reducer\";\r\n\r\n\r\ntype BlockSettingsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    saveValueCallback: () => void\r\n    onChangeSettingsValueCallback: (e: ChangeEvent<HTMLInputElement>) => void\r\n    errorValue: boolean\r\n    disabledSet: boolean\r\n}\r\n\r\n\r\nexport const BlockSettings: React.FC<BlockSettingsType> = (\r\n    {\r\n        startValue, maxValue, saveValueCallback,\r\n        onChangeSettingsValueCallback, errorValue, disabledSet\r\n    }) => {\r\n\r\n    const {titleOneInput, titleSecondInput, buttonSet} = initialState\r\n\r\n    let inputClass = errorValue ? s.errorInput : s.input\r\n    let disabledButton = `${s.disabled}`\r\n    let buttonSetClass = disabledSet ? disabledButton : `${s.button}`\r\n\r\n    return (\r\n        <div className={s.blockCont}>\r\n            <div className={s.valueCont}>\r\n                <div className={s.control}>\r\n                    <span className={s.valueName}>{titleOneInput}</span>\r\n                    <span>\r\n              <input className={inputClass} type='number' value={maxValue} onChange={onChangeSettingsValueCallback}\r\n                     name={'maxValue'}/>\r\n          </span>\r\n                </div>\r\n                <div className={s.control}>\r\n                    <span className={s.valueName}>{titleSecondInput}</span>\r\n                    <span>\r\n              <input className={inputClass} type='number' value={startValue} onChange={onChangeSettingsValueCallback}\r\n                     name={'startValue'}/>\r\n          </span>\r\n                </div>\r\n            </div>\r\n            <div className={s.buttonCont}>\r\n                <Button className={buttonSetClass} onClick={saveValueCallback} disabled={disabledSet}>\r\n                    {buttonSet}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport {Counter} from './Counter'\r\nimport s from './Counter.module.css'\r\nimport {BlockSettings} from \"./BlockSettings/BlockSettings\";\r\nimport {\r\n    incCountAC,\r\n    resetCountAC,\r\n    setMaxValueAC,\r\n    setStartValueAC,\r\n    setCountAC, setSettingsModeAC, setErrorValueAC\r\n} from \"../state/count-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../state/store\";\r\n\r\n\r\nexport const CounterContainer = () => {\r\n\r\n    const count = useSelector<AppStateType, number>(state => state.counter.count)\r\n    const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n    const startValue = useSelector<AppStateType, number>(state => state.counter.startValue)\r\n    const errorValue = useSelector<AppStateType, boolean>(state => state.counter.errorValue)\r\n    const settingsMode = useSelector<AppStateType, boolean>(state => state.counter.settingsMode)\r\n    const dispatch = useDispatch()\r\n\r\n    const onIncCount = (count: number, stepNumber: number) => {\r\n        dispatch(incCountAC(count, stepNumber))\r\n    }\r\n    const onResetCount = (count: number, startValue: number) => {\r\n        dispatch(resetCountAC(count, startValue))\r\n    }\r\n\r\n\r\n    const setMaxValue = (maxValue: number) => {\r\n        dispatch(setMaxValueAC(maxValue))\r\n    }\r\n    const setStartValue = (startValue: number) => {\r\n        dispatch(setStartValueAC(startValue))\r\n    }\r\n    const setCount = (startValue: number) => {\r\n        dispatch(setCountAC(startValue))\r\n    }\r\n\r\n\r\n    const onError = () => {\r\n        if (startValue >= maxValue || startValue < 0) {\r\n            dispatch(setErrorValueAC(true))\r\n        } else {\r\n            dispatch(setErrorValueAC(false))\r\n        }\r\n    }\r\n    onError()\r\n\r\n\r\n    const onChangeSettingsValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setSettingsModeAC(true))\r\n\r\n        let currentValue = Number(e.currentTarget.value)\r\n        switch (e.currentTarget.name) {\r\n            case 'startValue':\r\n                setStartValue(currentValue);\r\n                break;\r\n            case 'maxValue':\r\n                setMaxValue(currentValue);\r\n                break;\r\n        }\r\n    }\r\n\r\n    const saveValue = () => {\r\n        dispatch(setSettingsModeAC(false))\r\n        setCount(startValue)\r\n        onResetCount(count, startValue)\r\n\r\n    }\r\n\r\n\r\n    let disabledInc = count >= maxValue || settingsMode || errorValue\r\n    let disabledReset = count === startValue || settingsMode || errorValue\r\n    let disabledSet = errorValue || !settingsMode\r\n\r\n\r\n    return (<>\r\n            <div className={s.countCount}>\r\n                <Counter count={count}\r\n                         maxValue={maxValue}\r\n                         startValue={startValue}\r\n                         onIncCountCallback={onIncCount}\r\n                         onResetCountCallback={onResetCount}\r\n                         disabledInc={disabledInc}\r\n                         disabledReset={disabledReset}\r\n                         onChangeSettingsValueCallback={onChangeSettingsValue}\r\n                         settingsMode={settingsMode}\r\n                         errorValue={errorValue}/>\r\n            </div>\r\n            <div className={s.blockSettCont}>\r\n                <BlockSettings startValue={startValue}\r\n                               maxValue={maxValue}\r\n                               saveValueCallback={saveValue}\r\n                               onChangeSettingsValueCallback={onChangeSettingsValue}\r\n                               errorValue={errorValue}\r\n                               disabledSet={disabledSet}/>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport s from './component/Counter.module.css'\nimport {CounterContainer} from \"./component/CounterContainer\";\n\nconst App = () => {\n    return (\n        <div className={s.appCounter}>\n            <CounterContainer/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {countReducer} from \"./count-reducer\";\r\nimport {loadState, saveState} from \"./LocalStorage\";\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: countReducer\r\n})\r\n\r\n\r\ntype AppStoreType = typeof store\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n    // localStorage.setItem('app-state', JSON.stringify(store.getState()))\r\n})","import {AppStateType} from \"./store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appCounter\":\"Counter_appCounter__2sZ_A\",\"countCount\":\"Counter_countCount__FBKzt\",\"blockSettCont\":\"Counter_blockSettCont__152P_\",\"item\":\"Counter_item__26AQm\",\"itemMax\":\"Counter_itemMax__2UmEp\",\"buttonCont\":\"Counter_buttonCont__30v9z\",\"button\":\"Counter_button__2gjA0\",\"disabled\":\"Counter_disabled__2eWb9\",\"incorrectValue\":\"Counter_incorrectValue__2DejZ\",\"incCount\":\"Counter_incCount__3AAAh\",\"resetCount\":\"Counter_resetCount__CYcyr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"valueCont\":\"BlockSettings_valueCont__17aK4\",\"control\":\"BlockSettings_control__ppxVE\",\"valueName\":\"BlockSettings_valueName__3Nn6U\",\"input\":\"BlockSettings_input__1qAjX\",\"errorInput\":\"BlockSettings_errorInput__283na\",\"buttonCont\":\"BlockSettings_buttonCont__2lE0K\",\"button\":\"BlockSettings_button__25fV0\",\"disabled\":\"BlockSettings_disabled__2kDwv\"};"],"sourceRoot":""}